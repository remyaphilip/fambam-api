package com.fambam.api.model;
// Generated 23/08/2017 7:07:03 PM by Hibernate Tools 5.2.0.Beta1

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;

import com.fambam.api.util.ConjugateUtils;

/**
 * Relationship generated by hbm2java
 */
@Entity
@Table(name = "relationship", catalog = "fambamdb")
public class Relationship implements java.io.Serializable {

	private static final long serialVersionUID = -2215790287386721965L;
	private RelationshipId id;
	private RelationType relationType;
	private User userByUserTo;
	private User userByUserFrom;
	private Boolean enabled;

	public Relationship() {
	}
	
	@PrePersist
	public void defaults() {
		if(enabled==null) {
			enabled = true;
		}
	}
	
	public Relationship(RelationshipId id, RelationType relationType, User userByUserTo, User userByUserFrom) {
		this.id = id;
		this.relationType = relationType;
		this.userByUserTo = userByUserTo;
		this.userByUserFrom = userByUserFrom;
	}
	
	public Relationship(RelationshipId id, RelationType relationType, User userByUserTo, User userByUserFrom,
			Boolean enabled) {
		this.id = id;
		this.relationType = relationType;
		this.userByUserTo = userByUserTo;
		this.userByUserFrom = userByUserFrom;
		this.enabled = enabled;
	}

	@EmbeddedId
	@AttributeOverrides({ @AttributeOverride(name = "userFrom", column = @Column(name = "user_from", nullable = false)),
			@AttributeOverride(name = "userTo", column = @Column(name = "user_to", nullable = false)) })
	public RelationshipId getId() {
		return this.id;
	}

	public void setId(RelationshipId id) {
		this.id = id;
	}

	@Enumerated(EnumType.STRING)
	@Column(name="relation_type")
	public RelationType getRelationType() {
		return this.relationType;
	}

	public void setRelationType(RelationType relationType) {
		this.relationType = relationType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_to", nullable = false, insertable = false, updatable = false)
	public User getUserByUserTo() {
		return this.userByUserTo;
	}

	public void setUserByUserTo(User userByUserTo) {
		this.userByUserTo = userByUserTo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_from", nullable = false, insertable = false, updatable = false)
	public User getUserByUserFrom() {
		return this.userByUserFrom;
	}

	public void setUserByUserFrom(User userByUserFrom) {
		this.userByUserFrom = userByUserFrom;
	}

	@Column(name = "enabled")
	public Boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}
	
	public RelationType conjugateRelation(){
		return ConjugateUtils.getConjugateRelation(userByUserFrom, userByUserTo, relationType);
	}

}
